<% let MODEL_NAME =  MODEL.charAt(0).toUpperCase() + MODEL.slice(1);
    FUNCTION_NAME = [];
%>
<%_ if(METHODS.includes("C")){ FUNCTION_NAME.push(`add${MODEL_NAME}`); _%>
    const add<%-MODEL_NAME%> = async ({
        data
    }) => {
        try {
            const originalData = data;
            delete originalData.addedBy;
            delete originalData.updatedBy;
            const <%-MODEL%> = make<%-MODEL_NAME%>(originalData, 'insert<%-MODEL_NAME%>Validator');
            let created<%-MODEL_NAME%> = await <%-MODEL%>Service.createOne(<%-MODEL%>);
            return message.successResponse({ data:created<%-MODEL_NAME%> });
        } catch (error) {
            if (error.name === 'ValidationError') {
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("BC")){ FUNCTION_NAME.push(`bulkInsert${MODEL_NAME}`); _%>
    const bulkInsert<%-MODEL_NAME%> = async ({
        body
    })=>{
        try {
            let data = body.data;
            const <%-MODEL%>Entities = data.map((item)=>{
                delete item.addedBy;
                delete item.updatedBy;
                return make<%-MODEL_NAME%>(item,'insert<%-MODEL_NAME%>Validator');
            });
            const results = await <%-MODEL%>Service.createMany(<%-MODEL%>Entities);
            return message.successResponse({ data:results });
        } catch (error){
            if (error.name === 'ValidationError') {
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("FALL")){ FUNCTION_NAME.push(`findAll${MODEL_NAME}`); _%>
    const findAll<%-MODEL_NAME%> = async ({
        data
    }) => {
        try {
            let query = {};
            let options = {};
            if (data.query !== undefined){
                query = { ...data.query };
            }
            if (data.options !== undefined){
                options = { ...data.options };
            }
            query = <%-MODEL%>Service.queryBuilderParser(query);
            if (options && options.select && options.select.length){
                options.attributes = options.select;
            }
            if (options && options.sort){
                options.order = <%-MODEL%>Service.sortParser(options.sort);
                delete options.sort;
            }
            let result;
            if (options && options.include && options.include.length){
                let include = [];
                options.include.forEach(i => {
                i.model = models[i.model];
                if (i.query) {
                    i.where = <%-MODEL%>Service.queryBuilderParser(i.query);
                }
                include.push(i);
                });
                options.include = include;
            }  
            if (data.isCountOnly){
                result = await <%-MODEL%>Service.count(query, options);
                if (result) {
                result = { totalRecords: result };  
                } else {
                return message.recordNotFound();
                }
            } else {
                result = await <%-MODEL%>Service.findMany(query, options);
            }
            if (result){
                return message.successResponse({ data : result });
            } else {
                return message.badRequest();
            }        
        }
        catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("FBYID")){ FUNCTION_NAME.push(`find${MODEL_NAME}ByPk`); _%>
    const find<%-MODEL_NAME%>ByPk = async (pk,body = {}) => {
        try {
            let options = {};
            if (body && body.select && body.select.length) {
                options.attributes = body.select;
            }
            if (body && body.include && body.include.length) {
                let include = [];
                body.include.forEach(i => {
                i.model = models[i.model];
                if (i.query) {
                    i.where = dbService.queryBuilderParser(i.query);
                }
                include.push(i);
                });
                options.include = include;
            }
            let result = await <%-MODEL%>Service.findByPk(pk, options);
            if (result){
                return message.successResponse({ data:result });
            } else {
                return message.recordNotFound();
            }
                    
        }
        catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("U")){ FUNCTION_NAME.push(`update${MODEL_NAME}`); FUNCTION_NAME.push(`partialUpdate${MODEL_NAME}`);  _%>
    const removeEmpty = (obj) => {
        Object.entries(obj).forEach(([key, value]) => {
            if (value === undefined) {
                delete obj[key];
            }
        });
        return obj;
    };
    const update<%-MODEL_NAME%> = async (pk, data) =>{
        try {
            if (pk){          
                delete data.addedBy;
                delete data.updatedBy;
                const <%-MODEL%> = make<%-MODEL_NAME%>(data,'update<%-MODEL_NAME%>Validator');
                const filterData = removeEmpty(<%-MODEL%>);
                let query = { id:pk };
                let updated<%-MODEL_NAME%> = await <%-MODEL%>Service.updateMany(query,filterData);
                return message.successResponse({ data:updated<%-MODEL_NAME%> });
            }
            return message.badRequest();
        }
        catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };

    const partialUpdate<%-MODEL_NAME%> = async (id,data) =>{
        try {
          if (data && id){          
            const <%-MODEL%> = make<%-MODEL_NAME%>(data,'update<%-MODEL_NAME%>Validator');
            const filterData = removeEmpty(<%-MODEL%>);
            let query = { id:id };
            let updated<%-MODEL_NAME%> = await <%-MODEL%>Service.updateMany(query,filterData);
            return message.successResponse({ data:updated<%-MODEL_NAME%> });
          }
          return message.badRequest();
        }
        catch (error){
          if (error.name === 'ValidationError'){
            return message.inValidParam({ message: error.message });
          }
          return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("BU")){ FUNCTION_NAME.push(`bulkUpdate${MODEL_NAME}`); _%>
const bulkUpdate<%-MODEL_NAME%> = async (data) =>{
    try {
      if (data.filter && data.data){
        delete data.data.addedBy;
        delete data.data.updatedBy;
        const <%-MODEL%> = make<%-MODEL_NAME%>(data.data,'update<%-MODEL_NAME%>Validator');
        const filterData = removeEmpty(<%-MODEL%>);
        const updated<%-MODEL_NAME%> = await <%-MODEL%>Service.updateMany(data.filter,filterData);
        return message.successResponse({ data:updated<%-MODEL_NAME%> });
      }
      return message.badRequest();
    } catch (error){
      if (error.name === 'ValidationError'){
        return message.inValidParam({ message: error.message });
      }
      return message.failureResponse();
    }
  };
<%_ } _%>
<%_ if(METHODS.includes("UP")){ FUNCTION_NAME.push(`upsert${MODEL_NAME}`); _%>
    const upsert<%-MODEL_NAME%> = async (data)=>{
        try {
            if (data){
                let result = await <%-MODEL%>Service.upsert(data);
                if (result){
                    return message.successResponse();
                }
            }
            return message.badRequest();
        } catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message: error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("DMANY")){ FUNCTION_NAME.push(`deleteMany${MODEL_NAME}`); _%>
    const deleteMany<%-MODEL_NAME%> = async (data) => {
        try {
            if (data.ids && data.ids.length){
                const query = { id:{ [Op.in]: data.ids } };
                let result = await <%-MODEL%>Service.deleteMany(query);
                return message.successResponse({ data:result });
            }
            return message.badRequest();
        }
        catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("D")){ FUNCTION_NAME.push(`delete${MODEL_NAME}`); _%>
    const delete<%-MODEL_NAME%> = async (pk)=>{
        try {
            if (!pk){
                return message.badRequest();
            }
            let deleted<%-MODEL_NAME%> = await <%-MODEL%>Service.deleteByPk(pk);  
            return message.successResponse({ data: deleted<%-MODEL_NAME%> });
        } catch (error) {
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };

<%_ } _%>
<%_ if(METHODS.includes("SD")){ FUNCTION_NAME.push(`softDelete${MODEL_NAME}`); _%>
    const softDelete<%-MODEL_NAME%> = async ({
        pk
    },options = {})=>{
        try {
            if (pk){
                let updated<%-MODEL_NAME%>;
                let query = { id:pk };
                updated<%-MODEL_NAME%> = await <%-MODEL%>Service.softDeleteMany(query, options);
                return message.successResponse({ data:updated<%-MODEL_NAME%> });
            }
            return message.badRequest();
        } catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("SDMANY")){ FUNCTION_NAME.push(`softDeleteMany${MODEL_NAME}`); _%>
    const softDeleteMany<%-MODEL_NAME%> = async (ids) => {
        try {
            if (ids){
                const query = { id:{ [Op.in]: ids, } };
                const options = {};
                let data = await <%-MODEL%>Service.softDeleteMany(query,options);
                return message.successResponse({ data });
            }
            return message.badRequest();
        } catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message : error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>