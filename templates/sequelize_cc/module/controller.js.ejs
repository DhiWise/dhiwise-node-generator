<% let MODEL_NAME =  MODEL.charAt(0).toUpperCase() + MODEL.slice(1);
    FUNCTION_NAME = [];
    let UTILS_PATH = "../../../utils";
    if(PLATFORM !== "admin"){
        UTILS_PATH = "../../../../utils";
    }
%>
const response = require('<%-UTILS_PATH%>/response'); 
const responseHandler = require('<%-UTILS_PATH%>/response/responseHandler'); 

<%_ if(METHODS.includes("C")){ FUNCTION_NAME.push(`add${MODEL_NAME}`); _%>
const add<%-MODEL_NAME%> = (add<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        let dataToCreate = { ...req.body || {} };
        let result = await add<%-MODEL_NAME%>Usecase(dataToCreate,req,res);
        return responseHandler(res,result);
      } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
      }
};
<%_ } _%>
<%_ if(METHODS.includes("BC")){ FUNCTION_NAME.push(`bulkInsert${MODEL_NAME}`); _%>
const bulkInsert<%-MODEL_NAME%> = (bulkInsert<%-MODEL_NAME%>Usecase) => async (req,res)=>{
    try {
        let dataToCreate = req.body.data;
        let result = await bulkInsert<%-MODEL_NAME%>Usecase(dataToCreate,req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FALL")){ FUNCTION_NAME.push(`findAll${MODEL_NAME}`); _%>
const findAll<%-MODEL_NAME%> = (findAll<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        let query = { ...req.body.query || {} };
        let options = { ...req.body.options || {} };
        let result = await findAll<%-MODEL_NAME%>Usecase({
          query,
          options,
          isCountOnly:req.body.isCountOnly || false
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("COUNT")){ FUNCTION_NAME.push(`get${MODEL_NAME}Count`); _%>
const get<%-MODEL_NAME%>Count = (get<%-MODEL_NAME%>CountUsecase) => async (req,res) => {
    try {
      let where = { ...req.body.where || {} };
      let result = await get<%-MODEL_NAME%>CountUsecase({ where },req,res);  
      return responseHandler(res,result);
    } catch (error){
      return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FBYID")){ FUNCTION_NAME.push(`get${MODEL_NAME}`); _%>
const get<%-MODEL_NAME%> =  (get<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        if (!req.params.id){
            return responseHandler(res,response.badRequest());
        }
        let options = {};
        let query = { id: req.params.id };
        
        let result = await get<%-MODEL_NAME%>Usecase({
          query,
          options
        },req,res);
        return responseHandler(res,result);
    } catch (error) {
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("U")){ FUNCTION_NAME.push(`update${MODEL_NAME}`); _%>
const update<%-MODEL_NAME%> = (update<%-MODEL_NAME%>Usecase) => async (req,res) =>{
    try {
        if (!req.params.id){
          return responseHandler(res,response.badRequest());
        }
        let dataToUpdate = { ...req.body || {} };
        let query = { id: req.params.id };
        delete dataToUpdate.addedBy;
        delete dataToUpdate.updatedBy;

        let result = await update<%-MODEL_NAME%>Usecase({
          dataToUpdate,
          query
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_}_%>
<%_ if(METHODS.includes("PU")){ FUNCTION_NAME.push(`partialUpdate${MODEL_NAME}`);  _%>
const partialUpdate<%-MODEL_NAME%> = (partialUpdate<%-MODEL_NAME%>Usecase) => async (req,res) =>{
    try {
        if (!req.params.id){
          return responseHandler(res,response.badRequest());
        }
        let query = { id: req.params.id };
        let dataToUpdate = req.body;
        delete dataToUpdate.updatedBy;
        let result = await partialUpdate<%-MODEL_NAME%>Usecase({
          dataToUpdate,
          query
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("BU")){ FUNCTION_NAME.push(`bulkUpdate${MODEL_NAME}`); _%>
const bulkUpdate<%-MODEL_NAME%> = (bulkUpdate<%-MODEL_NAME%>Usecase) => async (req,res) =>{
    try {
        let dataToUpdate = { ...req.body.data || {} };
        let query = { ...req.body.filter || {} };
        delete dataToUpdate.addedBy;
        delete dataToUpdate.updatedBy;
        if (req.body.filter && req.body.filter.id){
          query.id.$in = [req.body.filter.id];
        }
        let result = await bulkUpdate<%-MODEL_NAME%>Usecase({
          dataToUpdate,
          query
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }   
};
<%_ } _%>
<%_ if(METHODS.includes("UP")){ FUNCTION_NAME.push(`upsert${MODEL_NAME}`); _%>
    const upsert<%-MODEL_NAME%> = async (data)=>{
        try {
            if (data){
                let result = await <%-MODEL%>Service.upsert(data);
                if (result){
                    return message.successResponse();
                }
            }
            return message.badRequest();
        } catch (error){
            if (error.name === 'ValidationError'){
                return message.inValidParam({ message: error.message });
            }
            return message.failureResponse();
        }
    };
<%_ } _%>
<%_ if(METHODS.includes("DMANY")){ FUNCTION_NAME.push(`deleteMany${MODEL_NAME}`); _%>
const deleteMany<%-MODEL_NAME%> = (deleteMany<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        if (!req.body || !req.body.ids){
          return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { id : { $in:ids } };
        
        let result = await deleteMany<%-MODEL_NAME%>Usecase({
          data:req.body,
          query
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("D")){ FUNCTION_NAME.push(`delete${MODEL_NAME}`); _%>
const delete<%-MODEL_NAME%> = (delete<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        if (!req.params.id){
          return responseHandler(res,response.badRequest());
        }
        let query = { id: req.params.id };
    
        let result = await delete<%-MODEL_NAME%>Usecase({
          query,
          isWarning: req.body.isWarning || false
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};

<%_ } _%>
<%_ if(METHODS.includes("SD")){ FUNCTION_NAME.push(`softDelete${MODEL_NAME}`); _%>
const softDelete<%-MODEL_NAME%> = (softDelete<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        if (!req.params.id){
          return responseHandler(res,response.badRequest());
        }
        let query = { id: req.params.id };
        const dataToUpdate = {
          isDeleted: true,
        };
        let result = await softDelete<%-MODEL_NAME%>Usecase({
          data:req.body,
          dataToUpdate,
          query
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>
<%_ if(METHODS.includes("SDMANY")){ FUNCTION_NAME.push(`softDeleteMany${MODEL_NAME}`); _%>
const softDeleteMany<%-MODEL_NAME%> = (softDeleteMany<%-MODEL_NAME%>Usecase) => async (req,res) => {
    try {
        if (!req.body || !req.body.ids){
            return responseHandler(res,response.badRequest());
        }
        let ids = req.body.ids;
        let query = { id : { $in:ids } };
        let result = await softDeleteMany<%-MODEL_NAME%>Usecase({
            query,
        },req,res);
        return responseHandler(res,result);
    } catch (error){
        return responseHandler(res,response.internalServerError({ message:error.message }));
    }
};
<%_ } _%>

module.exports =  {
    <%- FUNCTION_NAME.join(",") %>
}