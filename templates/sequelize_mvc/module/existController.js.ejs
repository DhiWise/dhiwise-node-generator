<% let MODEL_NAME =  MODEL.charAt(0).toUpperCase() + MODEL.slice(1);
    FUNCTION_NAME = [];
%>
<%_ if(METHODS.includes("C")){ FUNCTION_NAME.push(`add${MODEL_NAME}`); _%>
const add<%-MODEL_NAME%> = async (req, res) => {
    try {
        let dataToCreate = { ...req.body || {} };
        let validateRequest = validation.validateParamsWithJoi(
        dataToCreate,
        <%-MODEL%>SchemaKey.schemaKeys);
        if (!validateRequest.isValid) {
          return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        } 
        delete dataToCreate['addedBy'];
        delete dataToCreate['updatedBy'];
        let created<%-MODEL_NAME%> = await dbService.createOne(<%-MODEL_NAME%>,dataToCreate);
        return res.success({ data : created<%-MODEL_NAME%> });
    } catch (error) {
        return res.internalServerError( { message : error.message  } );  
    }
};
<%_ } _%>
<%_ if(METHODS.includes("BC")){ FUNCTION_NAME.push(`bulkInsert${MODEL_NAME}`); _%>
const bulkInsert<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let dataToCreate = req.body.data; 
        if (dataToCreate !== undefined && dataToCreate.length){
            dataToCreate = dataToCreate.map(item=>{
                delete item.addedBy;
                delete item.updatedBy;
                return item;
            });        
            let created<%-MODEL_NAME%> = await dbService.createMany(<%-MODEL_NAME%>,dataToCreate);
            return res.success({ data : created<%-MODEL_NAME%> });
        } else {
            return res.badRequest();
        }  
    } catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FALL")){ FUNCTION_NAME.push(`findAll${MODEL_NAME}`); _%>
const findAll<%-MODEL_NAME%> = async (req,res) => {
    try {
        let dataToFind = req.body;
        let options = {};
        let query = {};
        if (dataToFind && dataToFind.query !== undefined) {
          query = dataToFind.query;
        }
        query = dbService.queryBuilderParser(query);
        if (req.body && req.body.isCountOnly){
            let totalRecords = await dbService.count(<%-MODEL_NAME%>, query);
            return res.success({ data : { totalRecords } });
        }
        if (dataToFind && dataToFind.options !== undefined) {
          options = dataToFind.options;
        }
        if (options && options.select && options.select.length){
            options.attributes = options.select;
        }
        if (options && options.include && options.include.length){
          let include = [];
          options.include.forEach(i => {
            i.model = models[i.model];
            if (i.query) {
              i.where = dbService.queryBuilderParser(i.query);
            }
            include.push(i);
          });
          options.include = include;
        }
        if (options && options.sort){
            options.order = dbService.sortParser(options.sort);
            delete options.sort;
        }
        let result = await dbService.findMany(<%-MODEL_NAME%>,query,options);
        if (!result){
            return res.recordNotFound();
        }
        return res.success({ data : result });   
    } catch (error){
      return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FBYID")){ FUNCTION_NAME.push(`get${MODEL_NAME}`); _%>
const get<%-MODEL_NAME%> = async (req,res) => {
    try {
        if(!req.params.id){
          return res.badRequest();
        }
        let id = req.params.id;
        let result = await dbService.findByPk(<%-MODEL_NAME %>,id,{});
        if (!result){
          return res.recordNotFound();
        }
        return res.success({ data : result });
      } catch (error){
        return res.internalServerError( { message : error.message  } ); 
      }
};
<%_ } _%>
<%_ if(METHODS.includes("COUNT")){ FUNCTION_NAME.push(`get${MODEL_NAME}Count`); _%>
const get<%-MODEL_NAME%>Count = async (req,res) => {
    try {
        let where = {};
        if (req.body.where){
          where = req.body.where;
        }
        let totalRecords = await dbService.count(<%-MODEL_NAME%>,where);
        return res.success({ data : { totalRecords } });
    } catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("U")){ FUNCTION_NAME.push(`update${MODEL_NAME}`);  _%>
const update<%-MODEL_NAME%> = async (req,res) => {
    try {
        const dataToUpdate = { ...req.body };
        delete data.addedBy;
        delete data.updatedBy;
        let validateRequest = validation.validateParamsWithJoi(
          dataToUpdate,
          <%-MODEL%>SchemaKey.schemaKeys
        );
        if (validateRequest.isValid) {
          return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        }
        let query = { id:req.params.id };
        let updated<%-MODEL_NAME%> = await dbService.updateMany(<%-MODEL_NAME%>,query,dataToUpdate);
        return  res.success({ data : updated<%-MODEL_NAME%> });
    } catch (error) {
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("PU")){ FUNCTION_NAME.push(`partialUpdate${MODEL_NAME}`);  _%>
const partialUpdate<%-MODEL_NAME%> = async (req,res) => {
    try {
        const dataToUpdate = {
          ...req.body,
        };
        delete data.addedBy;
        delete data.updatedBy;
        
        let validateRequest = validation.validateParamsWithJoi(
          dataToUpdate,
          <%-MODEL%>SchemaKey.updateSchemaKeys
        );
        if (validateRequest.isValid) {
          return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        }
    
        const query = { id : req.params.id };
        let updated<%-MODEL_NAME%> = await dbService.updateMany(<%-MODEL_NAME%>, query, dataToUpdate);
        if (!updated<%-MODEL_NAME%>) {
          return res.recordNotFound();
        }
        return res.success({ data : updated<%-MODEL_NAME%> });    
    }
    catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
}
<%_ } _%>
<%_ if(METHODS.includes("BU")){ FUNCTION_NAME.push(`bulkUpdate${MODEL_NAME}`); _%>
const bulkUpdate<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let dataToUpdate = req.body;
        let filter = {};
        if (dataToUpdate && dataToUpdate.filter !== undefined) {
          filter = dataToUpdate.filter;
        }
        if (dataToUpdate && dataToUpdate.data !== undefined) {
          let updated<%-MODEL_NAME%> = await dbService.updateMany(<%-MODEL_NAME%>,filter,dataToUpdate);
          return  res.success({ data : updated<%-MODEL_NAME%> });
        }
        return res.badRequest();
      } catch (error){
        return res.internalServerError( { message : error.message  } );  
      }
};
<%_ } _%>
<%_ if(METHODS.includes("UP")){ FUNCTION_NAME.push("upsert"); _%>
const upsert = async (req,res) => {
    try {
        let params = req.body;
        let isValid = validation.validateParamsWithJoi(
          params,
          <%-MODEL%>SchemaKey.schemaKeys
        );
        if (isValid.error) {
          return res.inValidParam(isValid.error);
        }
    
        let result = await dbService.upsert(<%-MODEL_NAME%>,req.body);
    
        return  res.success(result);    
      }
    catch (error){
        return res.internalServerError( { message : error.message  } );  
    }
};
<%_ } _%>
<%_ if(METHODS.includes("DMANY")){ FUNCTION_NAME.push(`deleteMany${MODEL_NAME}`); _%>
const deleteMany<%-MODEL_NAME%> = async (req, res) => {
  try {
      let ids = req.body.ids; 
      if (!ids || !Array.isArray(ids) || !ids.length ) {
        return res.badRequest(); 
      }
      const query = { id:{ [Op.in]:ids } };
      let result = await dbService.deleteMany(<%-MODEL_NAME%>,query);
      return res.success({ data : result });
    } catch (error){
      return res.internalServerError( { message : error.message  } );  
    }
};
<%_ } _%>
<%_ if(METHODS.includes("D")){ FUNCTION_NAME.push(`delete${MODEL_NAME}`); _%>
const delete<%-MODEL_NAME%> = async (req,res) => {
  try {
    if(!req.params.id){
      return res.badRequest();
    }
    const result = await dbService.deleteByPk(<%-MODEL_NAME%>, req.params.id);
    if (!result){
      return res.recordNotFound();
    }
    return  res.success({ data : result });
  }
  catch (error){
    return res.internalServerError( { message : error.message  } ); 
  }
};
<%_ } _%>
<%_ if(METHODS.includes("SD")){ FUNCTION_NAME.push(`softDelete${MODEL_NAME}`); _%>
const softDelete<%-MODEL_NAME%> = async (req,res) => {
  try {
    if(!req.params.id){
      return res.badRequest();
    }
    let id = req.params.id;
    let result = await dbService.softDeleteByPk(<%-MODEL_NAME%>,id);
    return  res.success({ data : result });
  } catch (error){
    return res.internalServerError( { message : error.message  } );  
  }
};
<%_ } _%>
<%_ if(METHODS.includes("SDMANY")){ FUNCTION_NAME.push(`softDeleteMany${MODEL_NAME}`); _%>
const softDeleteMany<%-MODEL_NAME%> = async (req,res) => {
  try {
    let ids = req.body.ids;
    if (!ids || !Array.isArray(ids) || !ids.length ) {
      return res.badRequest();
    }
    let result = await dbService.softDeleteMany(<%-MODEL_NAME%>,{ id:{ [Op.in]:ids } }, { isDeleted : true });
    return res.success({ data : result });
  } catch (error){
    return res.internalServerError( { message : error.message  } );  
  }    
};
<%_ } _%>