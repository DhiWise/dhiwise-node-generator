<% let MODEL_NAME =  MODEL.charAt(0).toUpperCase() + MODEL.slice(1);
    FUNCTION_NAME = [];
%>
const <%- MODEL_NAME %> = require("../../model/<%-MODEL%>")
const <%-MODEL %>SchemaKey = require("../../utils/validation/<%-MODEL%>Validation");
const validation = require("../../utils/validateRequest");
const dbService = require("../../utils/dbService");

<%_ if(METHODS.includes("C")){ FUNCTION_NAME.push(`add${MODEL_NAME}`); _%>
const add<%-MODEL_NAME%> = async (req, res) => {
    try {
        let isValid = validation.validateParamsWithJoi(
        req.body,
        <%-MODEL%>SchemaKey.schemaKeys);
        if (isValid.error) {
            return res.inValidParam(isValid.error);
        } 
        delete req.body['addedBy'];
        delete req.body['updatedBy'];
        let data = new <%-MODEL_NAME%>({
            ...req.body
        });
        let result = await dbService.createDocument(<%-MODEL_NAME%>,data);
        return  res.ok(result);
    } catch (error) {
        if (error.name === 'ValidationError'){
        return res.validationError(error.message);
        }
        if (error.code && error.code == 11000){
        return res.isDuplicate(error.message);
        }
        return res.failureResponse(error.message); 
    }
};

<%_ } _%>
<%_ if(METHODS.includes("BC")){ FUNCTION_NAME.push(`bulkInsert${MODEL_NAME}`); _%>
const bulkInsert<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let data;   
        if (req.body.data !== undefined && req.body.data.length){
            data = req.body.data;
            let result = await dbService.bulkInsert(<%-MODEL_NAME%>,data);
            return  res.ok({ data :result });
        } else {
            return res.badRequest();
        }  
    } catch (error){
        if (error.name === 'ValidationError'){
            return res.validationError({ message : `Invalid Data, Validation Failed at ${ error.message}` });
        }
        else if (error.code && error.code == 11000){
            return res.isDuplicate();
        }
        return res.failureResponse();
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FALL")){ FUNCTION_NAME.push(`findAll${MODEL_NAME}`); _%>
const findAll<%-MODEL_NAME%> = async (req,res) => {
    try {
        let options = {};
        let query = {};
        let result;
        if (req.body.query !== undefined) {
            query = { ...req.body.query };
        }
        if (req.body.isCountOnly){
            result = await dbService.countDocument(<%-MODEL_NAME%>, query);
            if (result) {
                result = { totalRecords: result };
                return res.ok(result);
            } 
            return res.recordNotFound({});
        }
        else {
            if (req.body.options !== undefined) {
                options = { ...req.body.options };
            }
            result = await dbService.getAllDocuments(<%-MODEL_NAME%>,query,options);
            if (result && result.data && result.data.length){
                return res.ok(result);   
            }
            return res.recordNotFound({});
        }
    }
    catch (error){
        return res.failureResponse(error.message);
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FBYID")){ FUNCTION_NAME.push(`get${MODEL_NAME}`); _%>
const get<%-MODEL_NAME%> = async (req,res) => {
    try {
        let query = {};
        query._id = req.params.id;
        let result = await dbService.getDocumentByQuery(<%-MODEL_NAME%>,query);
        if (result){
            return  res.ok(result);
        }
        return res.recordNotFound({});
    }
    catch (error){
        return res.failureResponse(error.message);
    }
};
<%_ } _%>
<%_ if(METHODS.includes("COUNT")){ FUNCTION_NAME.push(`get${MODEL_NAME}Count`); _%>
const get<%-MODEL_NAME%>Count = async (req,res) => {
    try {
        let where = {};
        if (req.body.where){
            where = req.body.where;
        }
        let result = await dbService.countDocument(<%-MODEL_NAME%>,where);
        if (result){
            result = { totalRecords:result };
            return res.ok(result);
        }
        return res.recordNotFound({});
    }
    catch (error){
        return res.failureResponse(error.message);
    }
};      
<%_ } _%>
<%_ if(METHODS.includes("U")){ FUNCTION_NAME.push(`update${MODEL_NAME}`); FUNCTION_NAME.push(`partialUpdate${MODEL_NAME}`);  _%>
const update<%-MODEL_NAME%> = async (req,res) => {
    try {
        delete req.body['addedBy'];
        delete req.body['updatedBy'];
        let data = {
            ...req.body,
            id:req.params.id
        };
        let isValid = validation.validateParamsWithJoi(data,<%-MODEL%>SchemaKey.updateSchemaKeys);
        if (isValid.error) {
            return  res.inValidParam(isValid.error);
        }
        let query = { _id:req.params.id };
        let result = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>,query,data,{ new:true });
        if (!result){
            return res.recordNotFound({});
        }
        return  res.ok(result);
    }
    catch (error){
        if (error.name === 'ValidationError'){
        return res.validationError(error.message);
        }
        else if (error.code && error.code == 11000){
        return res.isDuplicate(error.message);
        }
        return res.failureResponse(error.message);
    }
};

const partialUpdate<%-MODEL_NAME%> = async (req,res) => {
    try {
      delete req.body['addedBy'];
      delete req.body['updatedBy'];
      let data = {
        ...req.body,
        id: req.params.id
      };
      let isValid = validation.validateParamsWithJoi(
        data,
        <%-MODEL%>SchemaKey.updateSchemaKeys
      );
      if (isValid.error) {
        return res.inValidParam(isValid.error);
      }
      const query = { _id:req.params.id };
      let result = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>, query, data,{ new:true });
      if (!result) {
        return res.recordNotFound({});
      }
      return res.ok(result);
    }
    catch (error){
      return res.failureResponse(error.message);
    }
};
<%_ } _%>
<%_ if(METHODS.includes("BU")){ FUNCTION_NAME.push(`bulkUpdate${MODEL_NAME}`); _%>
const bulkUpdate<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let filter = {};
        let data;
        if (req.body.filter !== undefined){
            filter = req.body.filter;
        }
        if (req.body.data !== undefined){
            data = { ...req.body.data };
            delete data['addedBy'];
            delete data['updatedBy'];
            let result = await dbService.bulkUpdate(<%-MODEL_NAME%>,filter,data);
            if (!result){
                return res.recordNotFound();
            }
            return  res.ok({ data :result });
        }
        else {
            return res.badRequest();
        }
    }
    catch (error){
        return res.failureResponse(); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("UP")){ FUNCTION_NAME.push("upsert"); _%>
const upsert = async (req,res) => {
    try {
        let params = req.body;
        let isValid = validation.validateParamsWithJoi(
            params,
            <%-MODEL%>SchemaKey.schemaKeys
        );
        if (isValid.error) {
            return res.inValidParam(isValid.error);
        }
    
        if (params.id) {
            let where = params.id;
            ['id','createdAt','updatedAt'].forEach(e => delete params[e]);
            let result = await dbService.updateDocument(<%-MODEL_NAME%>, where, params);
            if (!result){
                res.failureResponse('something is wrong');
            }
            return res.ok(result);
        }
        else {
            let data = new <%-MODEL_NAME%>({ ...params });
            let result = await dbService.createDocument(<%-MODEL_NAME%>, data);
            if (!result){
                return res.failureResponse('something is wrong');
            }
            return  res.ok(result);    
        }
    }
    catch (error){
        if (error.name === 'ValidationError'){
            return res.validationError(error.message);
        }
        else if (error.code && error.code == 11000){
            return res.isDuplicate(error.message);
        }
        return res.failureResponse(error.message); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("DMANY")){ FUNCTION_NAME.push(`deleteMany${MODEL_NAME}`); _%>
const deleteMany<%-MODEL_NAME%> = async (req, res) => {
    try {
        let ids = req.body.ids; 
        if (ids && ids.length){
          let query = { _id:{ $in:ids } };
          let result = await dbService.deleteMany(<%-MODEL_NAME%>,query);
          if (!result){
            return res.invalidRequest();
          }
          return res.ok(result);
        }
        return res.badRequest({}); 
    }
      catch (error){
        return res.failureResponse(error.message); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("D")){ FUNCTION_NAME.push(`delete${MODEL_NAME}`); _%>
const delete<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (req.params.id){
          let result = await dbService.deleteDocument(<%-MODEL_NAME%>,req.params.id);
          if (!result){
            return res.failureResponse('something went wrong.');
          }
          return res.ok(result);    
          
        } else {
          return res.badRequest({});
        }
    }
      catch (error){
        return res.failureResponse(error.message); 
    }    
};
<%_ } _%>
<%_ if(METHODS.includes("SD")){ FUNCTION_NAME.push(`softDelete${MODEL_NAME}`); _%>
const softDelete<%-MODEL_NAME%> = async (req,res) => {
    try {
        let query = { _id:req.params.id };
        let result = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>, query,{
            isDeleted: true,
            },{ new:true });
        if (!result){
            return res.recordNotFound({});
        }
        return  res.ok(result);
    } catch (error){
        return res.failureResponse(error.message); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("SDMANY")){ FUNCTION_NAME.push(`softDeleteMany${MODEL_NAME}`); _%>
const softDeleteMany<%-MODEL_NAME%> = async (req,res) => {
    try {
        let ids = req.body.ids;
        if (ids){
            const query = { _id:{ $in:ids } };
            let data = await dbService.bulkUpdate(<%-MODEL_NAME%>,query, {
                isDeleted: true
            });
            if (!data) {
                return res.recordNotFound({});
            }
            return res.ok(data);
        }
        return res.badRequest({});
    } catch (error){
        return res.failureResponse(error.message); 
    }
};
<%_ } _%>

module.exports = { 
    <%- FUNCTION_NAME.join(",") %>
}