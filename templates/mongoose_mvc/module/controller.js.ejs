<% let MODEL_NAME =  MODEL.charAt(0).toUpperCase() + MODEL.slice(1);
    FUNCTION_NAME = [];
    let MODEL_PATH = `../../model/${MODEL}`;
    let UTILS_PATH = `../../utils`;
    if(PLATFORM !== "admin"){
      MODEL_PATH = `../../../model/${MODEL}`;
      UTILS_PATH = `../../../utils`;
    }
%>
const <%- MODEL_NAME %> = require(<%= MODEL_PATH%>)
const <%-MODEL %>SchemaKey = require("<%-UTILS_PATH%>/validation/<%-MODEL%>Validation");
const validation = require("<%-UTILS_PATH%>/validateRequest");
const dbService = require("<%-UTILS_PATH%>/dbService");
const ObjectId = require('mongodb').ObjectId;

<%_ if(METHODS.includes("C")){ FUNCTION_NAME.push(`add${MODEL_NAME}`); _%>
const add<%-MODEL_NAME%> = async (req, res) => {
    try {
        let dataToCreate = {
            ...req.body || {}
        };
        let validateRequest = validation.validateParamsWithJoi(
        dataToCreate,
        <%-MODEL%>SchemaKey.schemaKeys);
        if (!validateRequest.isValid) {
            return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        } 
        delete dataToCreate['addedBy'];
        delete dataToCreate['updatedBy'];
        let data = new <%-MODEL_NAME%>(dataToCreate);
        let result = await dbService.createDocument(<%-MODEL_NAME%>,data);
        return  res.success({ data : result });
    } catch (error) {
        if (error.name === 'ValidationError'){
            return res.validationError({ message : `Invalid Data, Validation Failed at ${ error.message}` });
        }
        if (error.code && error.code == 11000){
            return res.validationError({ message : 'Data duplication found.' });
        }
        return res.internalServerError( { message : error.message  } ); 
    }
};

<%_ } _%>
<%_ if(METHODS.includes("BC")){ FUNCTION_NAME.push(`bulkInsert${MODEL_NAME}`); _%>
const bulkInsert<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let data;
        if (req.body && (!Array.isArray(req.body.data) || req.body.data.length < 1)) {
            return res.badRequest();
        }
        let dataToCreate = [ ...req.body.data ];   
        let result = await dbService.bulkInsert(<%-MODEL_NAME%>,dataToCreate);
        return  res.success({ data : result });
    } catch (error){
        if (error.name === 'ValidationError'){
            return res.validationError({ message : `Invalid Data, Validation Failed at ${ error.message}` });
        }
        else if (error.code && error.code == 11000){
            return res.validationError({ message : 'Data duplication found.' });
        }
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FALL")){ FUNCTION_NAME.push(`findAll${MODEL_NAME}`); _%>
const findAll<%-MODEL_NAME%> = async (req,res) => {
    try {
        let options = {};
        let query = {};       
        if (typeof req.body.query === 'object' && req.body.query !== null) {
            query = { ...req.body.query };
        }
        if (req.body.isCountOnly){
            let totalRecords = await dbService.countDocument(<%-MODEL_NAME%>, query);
            return res.success({ data: { totalRecords } });
        }
        if (req.body && typeof req.body.options === 'object' && req.body.options !== null) {
            options = { ...req.body.options };
        }
        let found<%-MODEL_NAME%>s = await dbService.getAllDocuments(<%-MODEL_NAME%>,query,options);
        if (!found<%-MODEL_NAME%>s || !found<%-MODEL_NAME%>s.data || !found<%-MODEL_NAME%>s.data.length){
            return res.recordNotFound();
        }
        return res.success({ data : found<%-MODEL_NAME%>s });   
    }
    catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("FBYID")){ FUNCTION_NAME.push(`get${MODEL_NAME}`); _%>
const get<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (!ObjectId.isValid(req.params.id)) {
            return res.validationError({ message : 'invalid objectId.' });
        }
        let query = {};
        query._id = req.params.id;
        let found<%-MODEL_NAME%> = await dbService.getSingleDocument(<%-MODEL_NAME%>,query);
        if (!found<%-MODEL_NAME%>){
             return res.recordNotFound();
        }
        return res.success({ data : found<%-MODEL_NAME%> });
    }
    catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("COUNT")){ FUNCTION_NAME.push(`get${MODEL_NAME}Count`); _%>
const get<%-MODEL_NAME%>Count = async (req,res) => {
    try {
        let where = {};
        if (typeof req.body.where === 'object' && req.body.where !== null) {
            where = { ...req.body.where };
        }
        let totalRecords = await dbService.countDocument(<%-MODEL_NAME%>,where);
        return res.success({ data :  { totalRecords } });
    }
    catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};      
<%_ } _%>
<%_ if(METHODS.includes("U")){ FUNCTION_NAME.push(`update${MODEL_NAME}`);  _%>
const update<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (!req.params.id){
            res.badRequest();
        }
        delete req.body['addedBy'];
        delete req.body['updatedBy'];
        let dataToUpdate = {
            ...req.body,
        };
        let validateRequest = validation.validateParamsWithJoi(dataToUpdate,<%-MODEL%>SchemaKey.updateSchemaKeys);
        if (!validateRequest.isValid) {
            return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        }
        let query = { _id : req.params.id };
        let updated<%-MODEL_NAME%> = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>,query,dataToUpdate,{ new:true });
        if (!updated<%-MODEL_NAME%>){
            return res.recordNotFound();
        }
        return res.success({ data : updated<%-MODEL_NAME%> });
    }
    catch (error){
        if (error.name === 'ValidationError'){
            return res.validationError({ message : `Invalid Data, Validation Failed at ${ error.message}` });
        }
        else if (error.code && error.code == 11000){
            return res.validationError({ message : 'Data duplication found.' });
        }
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("PU")){ FUNCTION_NAME.push(`partialUpdate${MODEL_NAME}`);  _%>
const partialUpdate<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (!req.params.id){
            res.badRequest();
        }
        delete req.body['addedBy'];
        delete req.body['updatedBy'];
        let dataToUpdate = {
            ...req.body,
        };
        let validateRequest = validation.validateParamsWithJoi(
            dataToUpdate,
            <%-MODEL%>SchemaKey.updateSchemaKeys
        );
        if (!validateRequest.isValid) {
           return res.validationError({ message : `Invalid values in parameters, ${validateRequest.message}` });
        }
        const query = { _id : req.params.id };
        let updated<%-MODEL_NAME%> = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>, query, dataToUpdate,{ new:true });
        if (!updated<%-MODEL_NAME%>) {
            return res.recordNotFound();
        }
        return res.success({ data : updated<%-MODEL_NAME%> });
    } catch (error) {
      return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("BU")){ FUNCTION_NAME.push(`bulkUpdate${MODEL_NAME}`); _%>
const bulkUpdate<%-MODEL_NAME%> = async (req,res)=>{
    try {
        let filter = req.body && req.body.filter ? { ...req.body.filter } : {};
        if (typeof req.body.data === 'object' && req.body.data !== null) {
            let dataToUpdate = { ...req.body.data };
            delete dataToUpdate['addedBy'];
            delete dataToUpdate['updatedBy'];
            let result = await dbService.bulkUpdate(<%-MODEL_NAME%>,filter,dataToUpdate);
            if (!result){
                return res.recordNotFound();
            }
            return  res.success({ data : result });
        }
        else {
            return res.badRequest();
        }
    }
    catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("UP")){ FUNCTION_NAME.push("upsert"); _%>
const upsert = async (req,res) => {
    try {
        let params = req.body;
        let validateRequest = validation.validateParamsWithJoi(
            params,
            <%-MODEL%>SchemaKey.schemaKeys
        );
        if (validateRequest.error) {
            return res.inValidParam(isValid.error);
        }
    
        if (params.id) {
            let where = params.id;
            ['id','createdAt','updatedAt'].forEach(e => delete params[e]);
            let result = await dbService.updateDocument(<%-MODEL_NAME%>, where, params);
            if (!result){
                res.internalServerError();
            }
            return res.success(result);
        }
        else {
            let data = new <%-MODEL_NAME%>({ ...params });
            let result = await dbService.createDocument(<%-MODEL_NAME%>, data);
            if (!result){
                return res.internalServerError(); 
            }
            return  res.success(result);    
        }
    }
    catch (error){
        if (error.name === 'ValidationError'){
            return res.validationError({ message : `Invalid Data, Validation Failed at ${ error.message}` });
        }
        else if (error.code && error.code == 11000){
            return res.validationError({ message : 'Data duplication found.' });
        }
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("DMANY")){ FUNCTION_NAME.push(`deleteMany${MODEL_NAME}`); _%>
const deleteMany<%-MODEL_NAME%> = async (req, res) => {
    try {
        let ids = req.body.ids; 
        if (!ids || !Array.isArray(ids) || ids.length < 1) {
            return res.badRequest();
        }
        let query = { _id:{ $in:ids } };
        let result = await dbService.deleteMany(<%-MODEL_NAME%>,query);
        return res.success({ data : result });
    }
      catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("D")){ FUNCTION_NAME.push(`delete${MODEL_NAME}`); _%>
const delete<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (req.params.id){
          let result = await dbService.deleteDocument(<%-MODEL_NAME%>,req.params.id);
          return res.success({ data : result });     
        } else {
          return res.badRequest();
        }
    }
      catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }    
};
<%_ } _%>
<%_ if(METHODS.includes("SD")){ FUNCTION_NAME.push(`softDelete${MODEL_NAME}`); _%>
const softDelete<%-MODEL_NAME%> = async (req,res) => {
    try {
        if (!req.params.id){
            return res.badRequest();
        }
        let query = { _id : req.params.id };
        let result = await dbService.findOneAndUpdateDocument(<%-MODEL_NAME%>, query,{
            isDeleted: true,
            },{ new:true });
        if (!result){
            return res.recordNotFound();
        }
        return res.success({ data : result });
    } catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>
<%_ if(METHODS.includes("SDMANY")){ FUNCTION_NAME.push(`softDeleteMany${MODEL_NAME}`); _%>
const softDeleteMany<%-MODEL_NAME%> = async (req,res) => {
    try {
        let ids = req.body.ids;
        if (!ids || !Array.isArray(ids) || ids.length < 1) {
            return res.badRequest();
        }
        const query = { _id:{ $in:ids } };
        let data = await dbService.bulkUpdate(<%-MODEL_NAME%>,query, {
            isDeleted: true
        });
        if (!data) {
            return res.recordNotFound();
        }
        return res.success({ data });
    } catch (error){
        return res.internalServerError( { message : error.message  } ); 
    }
};
<%_ } _%>

module.exports = { 
    <%- FUNCTION_NAME.join(",") %>
}